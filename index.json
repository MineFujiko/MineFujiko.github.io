[{"categories":["SOFT"],"content":"正则表达式 ","date":"2022-09-25","objectID":"/20220925_%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/:1:0","tags":["regexp","productivity"],"title":"正则表达式","uri":"/20220925_%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"},{"categories":["SOFT"],"content":"功能 搜索 替换 总表 ![regexp_table](/images/20220925_regexp/regexp_table.png) ","date":"2022-09-25","objectID":"/20220925_%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/:1:1","tags":["regexp","productivity"],"title":"正则表达式","uri":"/20220925_%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"},{"categories":["SOFT"],"content":"调试工具 在线测试器 问题在于，不同的语言有不同的版本。 目前，需要精通： python vscode regex101, 是学习正则表达式最有效的工具网站。 https://regex101.com/ ","date":"2022-09-25","objectID":"/20220925_%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/:1:2","tags":["regexp","productivity"],"title":"正则表达式","uri":"/20220925_%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"},{"categories":["SOFT"],"content":"知识点 匹配字符 匹配任意字符 . . 可以匹配任意单个字符，除了行结束符。 注意，这个在不同流派中是不一样的： ECMAScript(JavaScript)，行结束符为\\n,\\r Python，行结束符为\\n 匹配特殊字符 元字符(Metacharacter) 元字符，表示这个字符有特殊含义，而不是字符本身。 \\,是一个元字符，表示对其后的字符进行转义。 \\s,是一个元字符，表示空白字符。 配置多个字符中的一个-[] 使用元字符[和]，来定义一个字符集合。[和]不匹配任何字符，[]仅匹配一个字符，即只占一个位置。配置的字符为这个集合中的任意一个。 示例： [ns]，表示匹配n或者匹配s。 特殊的集合 [0-9] [a-z] [A-Z] [A-z] [A-Za-z0-9] 集合取非 用元字符^, 表示对一个字符集合进行取非。 注意：^仅在集合中表示取非，单独使用时，可表示匹配字符串开头。 匹配空白字符 [\\b] 回退 为什么带[]? \\f 换页符 \\n 换行符 \\r 回车符 \\t 制表符 Tab键 \\v 垂直制表符 组合使用 windows中，使用\\r\\n匹配“回车+换行”，把这个用作文本行的结束。 匹配空白行： windows, \\r\\n\\r\\n linux, \\n\\n mac, \\r\\r Fun: 回车和换行的区别：https://baijiahao.baidu.com/s?id=1732246005673869826\u0026wfr=spider\u0026for=pc 匹配特定字符 \\d 任何一个数字 [0-9] \\D 任何一个非数字 [^0-9] \\w 任何一个字母(大小写均可)/数字/下划线 [a-zA-Z0-9_] \\W \\w取反 [^a-zA-Z0-9_] \\s 任何空白字符 [\\f\\n\\r\\t\\v] § 任何非空白字符 [^\\f\\n\\r\\t\\v] \\x 匹配十六进制 \\0 匹配八进制 重复匹配 + 一个或多个 * 零个或多个 ? 零个或一个 {N} 匹配N次 {N,M} 匹配N到M次 {N,} 匹配至少N次 位置匹配 \\b 单词开头或者结尾 \\B \\b取反，不匹配边界 ^ 字符串开头 $ 字符串结尾 (?m) 分行模式 分行模式(?m) 在分行匹配模式下，^不仅匹配正常的字符串开头，还将匹配行分隔符（换行符）后面的开始位置；$不仅匹配正常的字符串结尾，还将匹配行分隔符（换行符）后面的结束位置。 注：有很多正则表达式，不支持(?m) 子表达式 元字符(和), 表示子表达式。 注意：替换时符号不同: python, \\1 javascript, $1 回溯、向前查找、条件表达式 ","date":"2022-09-25","objectID":"/20220925_%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/:1:3","tags":["regexp","productivity"],"title":"正则表达式","uri":"/20220925_%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"},{"categories":["SOFT"],"content":"参考 本来想参考官方介绍，但是始终没有找到，只找到了Virutal Studio的说明。 https://learn.microsoft.com/en-us/dotnet/standard/base-types/regular-expression-language-quick-reference https://learn.microsoft.com/en-us/dotnet/standard/base-types/regular-expressions 在VSCODE的task doc中 Tip: We have found the RegEx101 playground, which has an ECMAScript (JavaScript) flavor, to be a great way to develop and test regular expressions. ","date":"2022-09-25","objectID":"/20220925_%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/:1:4","tags":["regexp","productivity"],"title":"正则表达式","uri":"/20220925_%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"},{"categories":["SOFT"],"content":"Listary ","date":"2022-09-25","objectID":"/20220925_tools_for_productivity/:1:0","tags":["tools","productivity"],"title":"生产力工具","uri":"/20220925_tools_for_productivity/"},{"categories":["SOFT"],"content":"Everything ","date":"2022-09-25","objectID":"/20220925_tools_for_productivity/:2:0","tags":["tools","productivity"],"title":"生产力工具","uri":"/20220925_tools_for_productivity/"},{"categories":["SOFT"],"content":"Snipaste ","date":"2022-09-25","objectID":"/20220925_tools_for_productivity/:3:0","tags":["tools","productivity"],"title":"生产力工具","uri":"/20220925_tools_for_productivity/"},{"categories":["SOFT"],"content":"Zotero ","date":"2022-09-25","objectID":"/20220925_tools_for_productivity/:4:0","tags":["tools","productivity"],"title":"生产力工具","uri":"/20220925_tools_for_productivity/"},{"categories":["SOFT"],"content":"CapsLockIndicator 大小写锁定指示工具。 官网下载：https://cli.jonaskohl.de/ 中文插件：https://cli.jonaskohl.de/!/translations ","date":"2022-09-25","objectID":"/20220925_tools_for_productivity/:5:0","tags":["tools","productivity"],"title":"生产力工具","uri":"/20220925_tools_for_productivity/"},{"categories":["SOFT"],"content":"Vimium是一款Chrome的插件，它继承了VIM的思路，让我们在使用Chrome时，无论是浏览网页、切换标签、搜索以及其他操作时，全都可以通过键盘完成 。 vimium 成神之路-键盘党的胜利 ","date":"2022-08-20","objectID":"/20220820_vimium/:0:0","tags":["Chrome"],"title":"Vimium","uri":"/20220820_vimium/"},{"categories":["IC","FPGA"],"content":"代码结构 VHDL代码，由3个基本部分组成： LIBRARY(库) ENTITY(实体) ARCHITECTURE(构造体) 库 LIBRARY 列出当前设计中所用到的所有库文件 实体 ENTITY 定义电路的输入/输出引脚 构造体 ARCHITECTURE 描述实现具体电路 ","date":"2022-08-09","objectID":"/vhdl/:1:0","tags":["VHDL"],"title":"VHDL学习笔记","uri":"/vhdl/"},{"categories":["IC","FPGA"],"content":"库 库，是一些常用代码的集合。将电路设计中经常使用的一些代码存放在库中，有利于设计的复用和代码共享，同时可以使代码结构更加清晰。 库是如何构建的？ 代码的标准形式，包括了函数(FUNCTION), 过程(PROCEDURE), 元件(COMPONENT)等。将标准形式的代码打包成在一起，形成包集(PACKAGE)。用户根据需要对其进行编译使用。 库声明 VHDL中，有3个常用的库： ieee库 std库 work库 TODO ieee库 包集 std_logic_1164 定义了STD_LOGIC(8值)和STD_ULOGIC(9值)多值逻辑系统 std_logic_arith 定义了SIGNED(有符号)和UNSIGNED(无符号)数据类型、相关算术运算、比较运算 包含了多种数据转换函数 std_logic_signed 可以使STD_LOGIC_VECTOR像SIGNED一样进行运算 std_logic_unsigned 可以使STD_LOGIC_VECTOR像UNSIGNED一样进行运算 std_logic_arith 常用转化函数： conv_integer(p) conv_unsigned(p,b) conv_signed(p,b) conv_std_logic_vector(p,b) std库 std库，是VHDL设计环境的标准资源库，包括2个包集： standard, 数据类型 textio, 输入输出文本 work库 work库，为当前工作库，当前设计所有代码都放在work库中 示例 库的声明及使用。 library ieee; use IEEE.STD_LOGIC_1164.ALL; library std; use std.standard.all; library work; use work.all; ","date":"2022-08-09","objectID":"/vhdl/:1:1","tags":["VHDL"],"title":"VHDL学习笔记","uri":"/vhdl/"},{"categories":["IC"],"content":"流程 一般使用vcs/modelsim/irun等仿真生成波形文件(一般为fsdb)，再用verdi查看波形，跟踪代码。 ","date":"2022-08-07","objectID":"/20220807_vcs/:1:0","tags":["VCS"],"title":"VCS学习笔记","uri":"/20220807_vcs/"},{"categories":["IC"],"content":"三步法 什么场景下使用三步法？ Elaboration-润色、详细制作 elaborate的作用是，？？？，生成可执行文件simv。 指定elaboration的顶层 # 默认库(WORK)的模块tb_top, 作为顶层 vcs WORK.tb_top # 或者 vcs -top tb_top 注意：若不指定，如果有多个顶层，则会默认每个顶层都会被仿真执行。 详细参见: VCS ug-Compiling/Elaborating the Design, Key Compilation or Elaboration Features, Verilog Configuration and Libmaps; VCS仿真中的configuration和libmap Simulation 执行仿真。 # set vcs simulation options vcs_sim_opts=\"-ucli -licqueue -l simulate.log ./simv $vcs_sim_opts-do simulate.do ","date":"2022-08-07","objectID":"/20220807_vcs/:1:1","tags":["VCS"],"title":"VCS学习笔记","uri":"/20220807_vcs/"},{"categories":["IC"],"content":"命令说明 vcs -sverilog -full64 -override_timescale=1ns/1ps +cli+4 -Mupdate +lint=all +race=all +notimingcheck +v2k -f filelist -l run.log \u0026 Args Info -debug or -debug_all 使能UCLI命令行 -f \u003cfilename\u003e 指定文件列表的名称，文件中可包含源代码文件的路径和名称、编译选项参数等 -full64 在64位下编译 -j\u003cnumber\u003e 设置并行编译的进程数，j后没有空格 -l \u003cfilename\u003e 指定log文件名 -Mupdate[=0] -o \u003cname\u003e 指定编译生成的可执行文件名，默认为simv -timescale=1ns/1ps -override_timescale=1ns/1ps 让源文件统一使用指定的timescale，即文件中的失效 -P \u003cpli.tab\u003e 指定PLI表文件 -R 在编译之后，立即执行产生的可执行文件 -v \u003cfilename\u003e 指定verilog库文件 -y \u003cdir_pathname\u003e 指定verilog库路径 cli[\u003cname\u003e=1,2,3,4 使能CLI调试功能 +incdir+\u003cdir_path\u003e 指定`include指令包含文件的目录 +nospecify 屏蔽specify块中的路径延时和时序检查 +notimingcheck 屏蔽specify块中的时序检查 +race 纪录设计中的竞争冒险，输出到race.out中 +v2k 支持verilog-2001标准 -cm line+cond+fsm+tgl+branch 代码覆盖检查 +lint=all 显示详尽的诊断信息/输出警告信息 +define+\u003cname\u003e=\u003cvalue\u003e 增加一个宏定义，如：+define+INCR_EN=1 -ucli 用户命令接口 -licqueue 系统中VCS license被占用的情况下通知VCS等待license空闲的时候再执行，而不是直接退出 -sverilog 支持systemverilog编译 ","date":"2022-08-07","objectID":"/20220807_vcs/:2:0","tags":["VCS"],"title":"VCS学习笔记","uri":"/20220807_vcs/"},{"categories":["IC"],"content":"问题汇总 ","date":"2022-08-07","objectID":"/20220807_vcs/:3:0","tags":["VCS"],"title":"VCS学习笔记","uri":"/20220807_vcs/"},{"categories":["SOFT"],"content":"1.进入站点的根目录下 /myblog （如： F:\\\\Workspace\\\\Hugo\\§ites\\\\myblog） ","date":"2022-08-07","objectID":"/20220807_hugo_publish/:0:1","tags":["emacs","hugo","blog"],"title":"hugo发布流程","uri":"/20220807_hugo_publish/"},{"categories":["SOFT"],"content":"2.创建新文章 输入： hugo new posts/first_post.md 会按照模板在 posts/目录下，生成first_post.md文章。 注意：也可以自行在该目录下，创建新的文件，需要注意的是文章的头部需要一定设置。 文件头设置 --- title: \"FPGA之路-Verilog与编辑器的那些儿\" date: 2021-10-11T23:18:22+08:00 draft: false author: Nic tags: [FPGA,verilog] categories: [编辑器] --- 注：draft:false，代表草稿，不会真正发布。即，hugo指令时，不会再public下生成相关文件。 ","date":"2022-08-07","objectID":"/20220807_hugo_publish/:0:2","tags":["emacs","hugo","blog"],"title":"hugo发布流程","uri":"/20220807_hugo_publish/"},{"categories":["SOFT"],"content":"3.本地预览 输入如下命令，在本地访问：//localhost:1313/，即可预览博客。 hugo server -D ","date":"2022-08-07","objectID":"/20220807_hugo_publish/:0:3","tags":["emacs","hugo","blog"],"title":"hugo发布流程","uri":"/20220807_hugo_publish/"},{"categories":["SOFT"],"content":"4.生成文件 输入如下命令，会在public/目录下生成相关网页文件。 hugo // 或者 hugo -D // 连草稿文章也发布 ","date":"2022-08-07","objectID":"/20220807_hugo_publish/:0:4","tags":["emacs","hugo","blog"],"title":"hugo发布流程","uri":"/20220807_hugo_publish/"},{"categories":["SOFT"],"content":"5.部署 将 public/目录提交到github仓库即可。 小技巧：在根目录下，新建.gitignore文件，添加public,可以使得/public自成一个仓库。 ","date":"2022-08-07","objectID":"/20220807_hugo_publish/:0:5","tags":["emacs","hugo","blog"],"title":"hugo发布流程","uri":"/20220807_hugo_publish/"},{"categories":["SOFT"],"content":"其他 图片插入 Hugo的根目录下有一个static目录，这个目录是用来存放静态文件的，如：图片、css、js等文件。在部署时，hugo会把static目录下的文件复制到pulic目录下，且目录层级保持一致。 ![Vimium Help](/images/20220820_vimium/vimium_help.jpg) 那么，图片放在 static/images/20220820_vimium/vimium_help.jpg hugo拷贝生成 public/images/20220820_vimium/vimium_help.jpg 或者，使用LoveIt的shortcode https://hugoloveit.com/zh-cn/theme-documentation-extended-shortcodes/#image ","date":"2022-08-07","objectID":"/20220807_hugo_publish/:0:6","tags":["emacs","hugo","blog"],"title":"hugo发布流程","uri":"/20220807_hugo_publish/"},{"categories":["SOFT"],"content":"动态标题编号 ORG的标题默认是不带编号的，如图1所示。 fig1-不带编号的ORG标题 注意：1. 图片插入时，目录中不能有空格，不能有.等特殊字符。 ","date":"2022-03-05","objectID":"/16_6_%E5%8A%A8%E6%80%81%E6%A0%87%E9%A2%98%E7%BC%96%E5%8F%B7/:1:0","tags":["emcas","org-mode","blog"],"title":"org-mode-标题自动编号","uri":"/16_6_%E5%8A%A8%E6%80%81%E6%A0%87%E9%A2%98%E7%BC%96%E5%8F%B7/"},{"categories":["SOFT"],"content":"1 使能自动编号功能 使用命令 M-x org-num-mode ,即可打开动态标题编号。其效果，如图2所示。 fig2-带编号的ORG标题 ","date":"2022-03-05","objectID":"/16_6_%E5%8A%A8%E6%80%81%E6%A0%87%E9%A2%98%E7%BC%96%E5%8F%B7/:1:1","tags":["emcas","org-mode","blog"],"title":"org-mode-标题自动编号","uri":"/16_6_%E5%8A%A8%E6%80%81%E6%A0%87%E9%A2%98%E7%BC%96%E5%8F%B7/"},{"categories":["SOFT"],"content":"2 更多设置 限制自动编号功能 在使能自动编号功能后，在ORG文档中默认所有的标题都会自动编号。我们可以通过编号的级别、标签、 COMMENT 关键字, UNNUMBERED 属性等，限制自动编号功能。通过修改一下变量的值，设置限制条件： org-num-max-level org-num-skip-tags org-num-skip-commented org-num-skip-unnumbered org-num-skip-footnotes 示例1：设置org-num-max-level 为1, 效果如图3所示。 fig3-1级标题带编号 设置方式为： C-h v org-num-max-level 修改配置为1，如图4所示。 fig4-配置方法 使能全局自动编号功能 在配置文件中，设置 org-startup-munerated 变量为 t ,可以全局使能自动编号功能。 在当前文件中，使用 #+startup:num 可以在当前文档中使能自动编号功能。 ","date":"2022-03-05","objectID":"/16_6_%E5%8A%A8%E6%80%81%E6%A0%87%E9%A2%98%E7%BC%96%E5%8F%B7/:1:2","tags":["emcas","org-mode","blog"],"title":"org-mode-标题自动编号","uri":"/16_6_%E5%8A%A8%E6%80%81%E6%A0%87%E9%A2%98%E7%BC%96%E5%8F%B7/"},{"categories":["SOFT"],"content":"3 参考文档 The Org Manual Release 9.4, 16.6 Dynamic Headline Numbering ","date":"2022-03-05","objectID":"/16_6_%E5%8A%A8%E6%80%81%E6%A0%87%E9%A2%98%E7%BC%96%E5%8F%B7/:1:3","tags":["emcas","org-mode","blog"],"title":"org-mode-标题自动编号","uri":"/16_6_%E5%8A%A8%E6%80%81%E6%A0%87%E9%A2%98%E7%BC%96%E5%8F%B7/"},{"categories":["编辑器"],"content":"1.minimap使用 ","date":"2022-02-28","objectID":"/20220228_01/:1:0","tags":["VSCODE"],"title":"VSCODE使用技巧","uri":"/20220228_01/"},{"categories":["编辑器"],"content":"色块渲染 VSCODE默认，渲染每行的实际字符，而不是色块。将此修改为使用色块修改。 方法：在设置中搜索，Minimap: Render Characters，去掉勾选。 fig.1-默认效果 fig.2-修改后效果 ","date":"2022-02-28","objectID":"/20220228_01/:1:1","tags":["VSCODE"],"title":"VSCODE使用技巧","uri":"/20220228_01/"},{"categories":["编辑器"],"content":"控制mini地图大小 VSCODE默认，mini地图的大小配置是，迷你地图的大小与编辑器内容相同。我不喜欢这个的原因是，始终需要去拖动迷你地图。 将此默认proportional模式修改为fit模式，即fill模式。这样，迷你地图始终填充编辑器高度。 注：fill和fit的区别，还未清楚。 ","date":"2022-02-28","objectID":"/20220228_01/:1:2","tags":["VSCODE"],"title":"VSCODE使用技巧","uri":"/20220228_01/"},{"categories":["SOFT"],"content":"1.简介 官网：https://gohugo.io/ hexo迁移到hugo: https://liujiacai.net/blog/2020/12/05/hexo-to-hugo/ ","date":"2021-10-15","objectID":"/20211015_01/:1:0","tags":["HUGO"],"title":"使用hugo搭建个人博客","uri":"/20211015_01/"},{"categories":["SOFT"],"content":"2.主题收藏 https://hugoloveit.com/zh-cn/ ","date":"2021-10-15","objectID":"/20211015_01/:2:0","tags":["HUGO"],"title":"使用hugo搭建个人博客","uri":"/20211015_01/"},{"categories":["SOFT"],"content":"安装 根据官方教程进行安装： https://gohugo.io/getting-started/installing https://www.gohugo.org/doc/overview/installing/ (中文文档） Binary (Cross-platform) Download the appropriate version for your platform from Hugo Releases. Once downloaded, the binary can be run from anywhere. You don’t need to install it into a global location. This works well for shared hosts and other systems where you don’t have a privileged account. Ideally, you should install it somewhere in your PATH for easy use. /usr/local/bin is the most probable location. 下载： https://github.com/gohugoio/hugo/releases ","date":"2021-10-15","objectID":"/20211015_01/:3:0","tags":["HUGO"],"title":"使用hugo搭建个人博客","uri":"/20211015_01/"},{"categories":["SOFT"],"content":"放在任意位置，并添加环境变量 在CMD中 hugo version https://www.cnblogs.com/shaoxiao666/p/13715728.html ","date":"2021-10-15","objectID":"/20211015_01/:3:1","tags":["HUGO"],"title":"使用hugo搭建个人博客","uri":"/20211015_01/"},{"categories":["SOFT"],"content":"配置 生成站点 在cmd中， hugo new site myblog 创建文章 需要先进入到 myblog目录中。 hugo new about.md 配置 下载主题到theme目录下。 在配置文件中，配置主题。 # 更改使用 Hugo 构建网站时使用的默认主题 theme = \"LoveIt\" 启动服务 hugo serve -D 部署到github 在github上新建仓库 仓库名称必须为:minefujiko.github.io 。即，名字必须与个人用户名一致。 在cmd中，输入 hugo –buildDrafts 或者 hugo 也可以 生成public文件夹。 cd public/ git init git add . git commit -m \"first commit\" git remote add origin git@github.com:MineFujiko/MineFujiko.github.io.git git push -u origin main 只需要把public下的文件传到github的这个仓库中，即可访问： minefujiko.github.io网站。 注意，配置文件中还需要修改： baseURL = \"https://minefujiko.github.io\" ","date":"2021-10-15","objectID":"/20211015_01/:4:0","tags":["HUGO"],"title":"使用hugo搭建个人博客","uri":"/20211015_01/"},{"categories":["SOFT"],"content":"TODO 更改域名 https://blog.csdn.net/qq_41684621/article/details/103230888 ","date":"2021-10-15","objectID":"/20211015_01/:5:0","tags":["HUGO"],"title":"使用hugo搭建个人博客","uri":"/20211015_01/"},{"categories":["SOFT"],"content":"评论系统 https://my.oschina.net/xdr630/blog/5250405 ","date":"2021-10-15","objectID":"/20211015_01/:6:0","tags":["HUGO"],"title":"使用hugo搭建个人博客","uri":"/20211015_01/"},{"categories":["SOFT"],"content":"配置文件修改 ","date":"2021-10-15","objectID":"/20211015_01/:7:0","tags":["HUGO"],"title":"使用hugo搭建个人博客","uri":"/20211015_01/"},{"categories":["SOFT"],"content":"修改头像 myblog为整个站点的文件夹。 头像的位置为，./static/images/Chuan.jpg ","date":"2021-10-15","objectID":"/20211015_01/:7:1","tags":["HUGO"],"title":"使用hugo搭建个人博客","uri":"/20211015_01/"},{"categories":["SOFT"],"content":"修改头像下的图标链接 [languages.zh-cn.params.social] Github = \"xxxx\" # 在这里替换为自己的路径。 ","date":"2021-10-15","objectID":"/20211015_01/:7:2","tags":["HUGO"],"title":"使用hugo搭建个人博客","uri":"/20211015_01/"},{"categories":["SOFT"],"content":"插入图片 图片依旧放在./static/images/目录下。 在markdwon文档中 Lighthouse (figure) ","date":"2021-10-15","objectID":"/20211015_01/:7:3","tags":["HUGO"],"title":"使用hugo搭建个人博客","uri":"/20211015_01/"},{"categories":["编辑器"],"content":"Verilog HDL，硬件描述语言的一种，以文本形式描述数字系统硬件的结构和行为的语言[1]。Verilog HDL和VHDL是世界上最流行的两种硬件描述语言。在硬件描述语言中是很流行，但在所有编程语言中，其长期在100名左右徘徊，在TIOBE 2019年2月的排行榜中甚至跌出了前100名，足见其有多小众。 Lighthouse (figure) ","date":"2021-10-11","objectID":"/first_post/:0:0","tags":["FPGA","verilog"],"title":"FPGA之路-Verilog与编辑器的那些儿","uri":"/first_post/"},{"categories":["编辑器"],"content":"1.Verilog与Notepad++ 17年大学毕业后，从事FPGA开发相关工作，进入公司后，大家都用Notepad++，于是我也顺理成章的用上了Notepad++。Notepad++特别适合于Verilog的代码编写工作，因为Verilog不像其他编程语言，需要频繁的编译与调试，而且，一般Verilog的代码量不是特别大。前三个月，我用得很爽，但慢慢地，问题就来了。Notepad++除了支持Verilog语法高亮，除此之外只有基本的编辑功能。还是那句老话，磨刀不误砍柴工。不满足于现状的我，还是在因特内特上“疯狂”的寻找Notepad++与Verilog相关的插件，最终的结果不出意料的一无所获。 在这里，我仔细思考了一下，Verilog相关的插件为何如此之少的原因？主要有一下三点： 使用Verilog这种语言的人很少，无论是FPGA开发还是芯片设计的从业人员，相比于互联网的程序员的数量，完全不在一个数量级上； FPGA工程师号称“硬件工程师中的软件工程师”，在国内从事FPGA开发的技术人员绝大多数都是硬件出身，很少有软件出身的。插件编写需要很专业的软件功底，所以，这就尴尬了，会写插件的人不会去用Verilog，而会Verilog的人又都不会插件，同时，写Verilog的人很难有开源的思想； 国外的情况不清楚，但无论哪一种编程语言，国内对插件开发这类的事情似乎并不太“热衷”； 在插件寻找之路上，我意外的发现Sublime Text3在这一方面明显强于Notepad++。 2019年2月28日写到这里，2020年4月4日才接上–！ tip\r\r2019年2月28日写到这里，2020年4月4日才接上–！\r\r \r ","date":"2021-10-11","objectID":"/first_post/:1:0","tags":["FPGA","verilog"],"title":"FPGA之路-Verilog与编辑器的那些儿","uri":"/first_post/"},{"categories":["编辑器"],"content":"2.Verilog与Sublime Text3 由于Notepad++对Verilog的支持实在太差，我转而使用Sublime Text3进行Code。Sublime Text3支持Verilog的插件明显比Notepad++多很多，17年底时开始在网上疯狂地搜索与Verilog相关的插件。这些插件都很强大和使用，具体可以参照以下的文章： 1.sublime3添加verilog自动补全代码段 2.sublime text 3在windows中配置ctags插件 3.使用模板加快编码效率（三）——sublime [更新] 4.Sublime Text 2 和 Verilog HDL 5.引用4的原创网页已经打不开了，这是备用链接 6.sublime text3 verilog代码编写高级操作篇 本以为可以和Sublime Text3一起孤独终老了，用了1个多月后，发现Sublime Text3相比于Notepad++依旧略显“笨重”。同时，各种插件有很多地方并不是完全适合我。由于笔者的前公司有各种编码规范，许多自动化的功能，还需要手动进行二次修改，这样似乎并不能带来太多的便捷。有时候还不如复制粘贴来得快。于是，就这样还是和Sublime Text3和平分手了。 近期看同事使用Sublime Text3，发现Sublime Text3编辑器有Python的API，那么只要掌握一点Pyhton的知识，就可以自己制作专属于自己的插件了。用Python去制作插件，学些成本相当较低。 ","date":"2021-10-11","objectID":"/first_post/:2:0","tags":["FPGA","verilog"],"title":"FPGA之路-Verilog与编辑器的那些儿","uri":"/first_post/"},{"categories":["编辑器"],"content":"3.Verilog与VS Code VS Code 是15年发布的，我第一次接触大概是16年的时候，不由的想起那个时候我还在画CAD –！。17年差不多偶尔使用VS Code写点Markdown，18年写Python。但时至2020年3月之前，我从未用VS Code进行过Verilog的Code。原因主要在于，17年接触VS Code时，那时VS Code商店里与verilog/systemverilog相关插件的数量用一只手就可以数过来（欲哭无泪），同时很多功能不够完善，网上更加找不到相关的帖子。但那时，我就知道有一天VS Code会变得足够强大。等到那个时候，我会选择使用VS Code的。我于2020年4月3日切到VS Code上进行Code。此至今日（2020年4月4日），VS Code上的HDL语言相关的插件已经很强大了。 后续，我会写一些关于VS CODE的Verilog环境搭建的教程 ","date":"2021-10-11","objectID":"/first_post/:3:0","tags":["FPGA","verilog"],"title":"FPGA之路-Verilog与编辑器的那些儿","uri":"/first_post/"},{"categories":["编辑器"],"content":"4.Verilog与Vim Vim又是一个小插曲，前同事中有VIM大佬，看大佬用VIM写verilog，简直出神入化。我于2018年4月12日在JD购得一本《Vim使用技巧（第2版）》[英] Drew Neil著。不到3周，我便放弃了。。。 ","date":"2021-10-11","objectID":"/first_post/:4:0","tags":["FPGA","verilog"],"title":"FPGA之路-Verilog与编辑器的那些儿","uri":"/first_post/"},{"categories":["编辑器"],"content":"5.重拾旧爱Notepad++ 最终选用Notepad++，其一是因为轻量化。但是，我也发现当Notepad++在工作区打开太多文件夹时，也会存在各种卡顿的问题。 其二，是因为我找到了Notepad++的Python接口。可以通过Python脚本进行各种定制化操作，达到和插件一样的效果，用起来也很爽。 目前，我实现了自己定制的自动端口例化和自动声明，具体使用方法可以参考我的Github库：Notepad_plugins_for_verilog。（由于很多插件是在公司写的，前公司的东西都带不出来，后续写插件一定要在家里进行。–！） ","date":"2021-10-11","objectID":"/first_post/:5:0","tags":["FPGA","verilog"],"title":"FPGA之路-Verilog与编辑器的那些儿","uri":"/first_post/"},{"categories":["编辑器"],"content":"6.打造专属的编辑器 待更新。。。 使用VS code的原因： 跨平台 趋势 版本控制，对于GIT的支持 ","date":"2021-10-11","objectID":"/first_post/:6:0","tags":["FPGA","verilog"],"title":"FPGA之路-Verilog与编辑器的那些儿","uri":"/first_post/"},{"categories":["编辑器"],"content":"7.历经磨难“终得利器 1.Verilog HDL之百度百科：https://baike.baidu.com/item/Verilog%20HDL/596353?fr=aladdin 2.VIM：https://www.vim.org/ 3.Python Script：https://github.com/bruderstein/PythonScript/releases 4.Notepad++ Python Script下载链接：http://npppythonscript.sourceforge.net/ ","date":"2021-10-11","objectID":"/first_post/:7:0","tags":["FPGA","verilog"],"title":"FPGA之路-Verilog与编辑器的那些儿","uri":"/first_post/"}]